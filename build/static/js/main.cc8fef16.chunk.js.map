{"version":3,"sources":["logo.svg","components/Track.jsx","FavService.js","components/Home.jsx","components/Favorites.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","Track","props","music","isFavorite","favBtnClass","className","style","flex","src","album","cover_xl","alt","title","preview","controls","href","onClick","e","preventDefault","onFavClick","getFavoritesFromStorage","JSON","parse","window","localStorage","getItem","Boolean","this","find","f","id","toggleFavorite","removeFavoriteFromStorage","addFavoriteToStorage","favorites","push","setItem","stringify","musicIndex","findIndex","splice","Home","useState","setTitle","orderBy","setOrderBy","musics","setMusics","onFavorites","FavService","onSubmit","encodedTitle","encodeURIComponent","fetchJsonp","then","res","json","data","htmlFor","type","onChange","target","value","placeholder","map","key","Favorites","App","logo","width","to","path","component","exact","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.cc8fef16.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\n\nfunction Track(props) {\n  const music = props.music;\n  const isFavorite = props.isFavorite;\n  const favBtnClass = isFavorite ? \"btn-outline-danger\" : \"btn-danger\";\n\n  function onFavClick(music) {\n    return e => {\n      e.preventDefault();\n      props.onClick(music);\n    };\n  }\n\n\n  return (<div className=\"card w-50\" style={{\n      flex: \"initial\"\n    }}>\n    <div className=\"card-body text-left\">\n      <div className=\"media mb-2\">\n        <img className=\"align-self-center mr-2 w-25\" src={music.album.cover_xl} alt=\"\"/>\n        <div className=\"media-body\">\n          <h5 className=\"card-title\">{music.title}</h5>\n          <h6 className=\"card-subtitle mb-2 text-muted\">\n            {music.album.title}\n          </h6>\n        </div>\n      </div>\n      <audio src={music.preview} className=\"w-100\" controls=\"controls\"/>\n      <br/>\n      <a href=\"#\" onClick={onFavClick(music)} className={'btn btn-sm btn-danger ' + favBtnClass}>\n       {isFavorite ? <><i className=\"fas fa-heart-broken\"></i> Retirer des favoris</> : <><i className=\"fas fa-heart\"></i> Ajouter aux favoris</>}\n        </a>\n  </div>\n  </div>);\n}\n\nexport default Track;","const STORAGE_FAVORITE_KEY = 'deezweb.favorites'\n\nexport default {\n    // Retourne les favoris du localStorage du navigateur\n    getFavoritesFromStorage() {\n        return JSON.parse(window.localStorage.getItem(STORAGE_FAVORITE_KEY)) || []\n    },\n\n    // Vérifie si une musique se trouve dans les favoris\n    isFavorite(music) {\n        return Boolean(this.getFavoritesFromStorage().find(f => f.id === music.id))\n    },\n\n    // Permet d'ajouter/supprimer un favori du localStorage\n    toggleFavorite(music) {\n        if (this.isFavorite(music)) {\n            this.removeFavoriteFromStorage(music)\n        } else {\n            this.addFavoriteToStorage(music)\n        }\n    },\n\n    // Ajoute un favori au localStorage\n    addFavoriteToStorage(music) {\n        const favorites = this.getFavoritesFromStorage();\n        favorites.push(music)\n        window.localStorage.setItem(STORAGE_FAVORITE_KEY, JSON.stringify(favorites))\n    },\n\n    // Supprime un favori du localStorage\n    removeFavoriteFromStorage(music) {\n        const favorites = this.getFavoritesFromStorage()\n        const musicIndex = favorites.findIndex(f => f.id === music.id)\n        favorites.splice(musicIndex, 1)\n        window.localStorage.setItem(STORAGE_FAVORITE_KEY, JSON.stringify(favorites))\n    }\n}","import React, {useState} from \"react\";\nimport fetchJsonp from \"fetch-jsonp\";\nimport Track from \"./Track.jsx\";\nimport FavService from \"../FavService.js\";\n\nfunction Home(props) {\n  const [title, setTitle] = useState(\"\");\n  const [orderBy, setOrderBy] = useState(\"ARTIST_ASC\");\n  const [musics, setMusics] = useState([]);\n\n  function onTitleChange(e) {\n    setTitle(e.target.value);\n  }\n\n  function onOrderChange(e) {\n    setOrderBy(e.target.value);\n  }\n\n  function onSearch(e) {\n    e.preventDefault();\n    const encodedTitle = encodeURIComponent(title); //Assure la compatibilité avec une saisie en GET\n\n    fetchJsonp(`https://api.deezer.com/search?q=${encodedTitle}&order=${orderBy}&output=jsonp`).then(res => res.json()).then(data => data.data).then(musics => {\n      setMusics(musics);\n    });\n  }\n\n  function onFavorites(music) {\n    FavService.toggleFavorite(music);\n    setMusics([...musics]);\n  }\n\n  return (<main className=\"container mt-3\">\n    <h1>Recherche {title}</h1>\n    <p>Recherchez un titre sur Deezer en utilisant le formulaire suivant :</p>\n    <hr/>\n    <form onSubmit={onSearch}>\n      <div className=\"row\">\n        <label htmlFor=\"searchText\" className=\"col-sm-2 col-form-label text-right\">\n          Titre&nbsp;:\n        </label>\n        <div className=\"col-sm-4\">\n          <input type=\"text\" className=\"form-control\" id=\"searchText\" onChange={onTitleChange} placeholder=\"Eminem, Oxmo, Michael Jackson, ...\"/>\n        </div>\n        <label htmlFor=\"searchText\" className=\"col-sm-2 col-form-label text-right\">\n          Trier par :\n        </label>\n        <div className=\"col-sm-2\">\n          <select id=\"order\" onChange={onOrderChange} className=\"custom-select\">\n            <option value=\"ALBUM_ASC\">Album</option>\n            <option value=\"ARTIST_ASC\">Artiste</option>\n            <option value=\"TRACK_ASC\">Musique</option>\n            <option value=\"RANKING\">Les plus populaires</option>\n            <option value=\"RATING_ASC\">Les mieux notés</option>\n          </select>\n        </div>\n        <div className=\"col-sm-2 text-right\">\n          <input type=\"submit\" className=\"btn btn-primary\" value=\"Go\"/>\n        </div>\n      </div>\n    </form>\n    <hr/> {/* <h3>Aucun résultat pour cette recherche ...</h3> */}\n    <h2>Résultats</h2>\n    <div className=\"card-group search-results\">\n      {\n        musics.map(music => {\n          return <Track key={music.id} music={music} onClick={onFavorites} isFavorite={FavService.isFavorite(music)} />;\n        })\n      }\n    </div>\n  </main>);\n}\n\nexport default Home;","import React, {useState} from \"react\";\nimport FavService from \"../FavService\";\nimport Track from \"./Track\";\n\nfunction Favorites(props) {\nconst [musics, setMusics] = useState(FavService.getFavoritesFromStorage());\n\nfunction onFavorites(music) {\n  FavService.toggleFavorite(music);\n  setMusics(FavService.getFavoritesFromStorage());\n}\n\n\n  return (<main className=\"container mt-3\">\n  <h1>Mes favoris</h1>\n  <p>Liste de mes titres favoris</p>\n  <hr />\n\n  {musics.map(music => (\n      <Track\n          key={music.id}\n          music={music}\n          onClick={onFavorites}\n          isFavorite={FavService.isFavorite(music)}\n      />\n  ))}\n</main>);\n}\n\nexport default Favorites;","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Home from \"./components/Home.jsx\";\nimport Favorites from \"./components/Favorites.jsx\";\nimport {BrowserRouter as Router, Route, Link} from \"react-router-dom\";\n\nfunction App() {\n  return (<Router>\n    <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\n      <div className=\"container\">\n        <span className=\"navbar-brand mb-0 h1\">\n          <img src={logo} alt=\"React Logo\" width=\"42\"/>\n          Deezweb\n        </span>\n        <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\n          <ul className=\"navbar-nav\">\n            <Link to=\"/deezweb/\" className=\"nav-link\">\n              <i className=\"fas fa-search mx-1\"/>\n              Rechercher un titre\n            </Link>\n            <Link to=\"/deezweb/favorites\" className=\"nav-link\">\n              <i className=\"fas fa-heartbeat mx-1\"/>\n              Mes favoris\n            </Link>\n          </ul>\n        </div>\n      </div>\n    </nav>\n\n    <Route path=\"/deezweb/\" component={Home} exact=\"exact\"/>\n    <Route path=\"/deezweb/favorites\" component={Favorites}/>\n  </Router>);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}